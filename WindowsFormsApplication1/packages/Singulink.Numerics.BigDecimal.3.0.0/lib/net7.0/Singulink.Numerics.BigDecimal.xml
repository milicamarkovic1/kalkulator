<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Singulink.Numerics.BigDecimal</name>
    </assembly>
    <members>
        <member name="T:Singulink.Numerics.BigDecimal">
            <summary>
            Represents an arbitrary precision decimal.
            </summary>
            <remarks>
            <para>
            All operations on <see cref="T:Singulink.Numerics.BigDecimal"/> values are exact except division in the case of a repeating decimal result. If the result of the division
            cannot be exactly represented in decimal form then the largest of the dividend precision, divisor precision and the specified maximum extended precision
            is used to represent the result. You can specify the maximum extended precision to use for each division operation by calling the <see
            cref="M:Singulink.Numerics.BigDecimal.Divide(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal,System.Int32,Singulink.Numerics.RoundingMode)"/> method or use the <see cref="M:Singulink.Numerics.BigDecimal.DivideExact(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal)"/> / <see
            cref="M:Singulink.Numerics.BigDecimal.TryDivideExact(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal@)"/> methods for division operations that are expected to return exact results. The standard
            division operator (<c>/</c>) first attempts to do an exact division and falls back to extended precision division using <see
            cref="P:Singulink.Numerics.BigDecimal.MaxExtendedDivisionPrecision"/> as the maximum extended precision parameter.</para>
            <para>
            Addition and subtraction are fully commutitive and associative for all converted data types. This makes <see cref="T:Singulink.Numerics.BigDecimal"/> a great data type to
            store aggregate totals that can freely add and subtract values without accruing inaccuracies over time.</para>
            <para>
            Conversions from floating-point types (<see cref="T:System.Single"/>/<see cref="T:System.Double"/>) default to <see cref="F:Singulink.Numerics.FloatConversion.Truncate"/> mode in order to
            match the behavior of floating point to <see cref="T:System.Decimal"/> conversions, but there are several conversion modes available that are each suitable in
            different situations. You can use the <see cref="M:Singulink.Numerics.BigDecimal.FromSingle(System.Single,Singulink.Numerics.FloatConversion)"/> or <see cref="M:Singulink.Numerics.BigDecimal.FromDouble(System.Double,Singulink.Numerics.FloatConversion)"/> methods to
            specify a different conversion mode.</para>
            </remarks>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.MaxExtendedDivisionPrecision">
            <summary>
            Gets the maximum extended precision used by the division operator if the result is not exact (i.e. has repeating decimals). If the dividend or
            divisor precision is greater then that value is used instead. The current value is 50 but is subject to change.
            </summary>
            <remarks>
            <para>For better control over the result of each division operation see the <see cref="M:Singulink.Numerics.BigDecimal.Divide(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal,System.Int32,Singulink.Numerics.RoundingMode)"/>,
            <see cref="M:Singulink.Numerics.BigDecimal.DivideExact(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal)"/> and <see cref="M:Singulink.Numerics.BigDecimal.TryDivideExact(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal@)"/> methods.</para>
            </remarks>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.Zero">
            <summary>
            Gets a value representing zero (0).
            </summary>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.One">
            <summary>
            Gets a value representing one (1).
            </summary>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.MinusOne">
            <summary>
            Gets a value representing negative one (-1).
            </summary>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.IsZero">
            <summary>
            Gets a value indicating whether the current value is 0.
            </summary>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.IsOne">
            <summary>
            Gets a value indicating whether the current value is 1.
            </summary>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.Sign">
            <summary>
            Gets a number indicating the sign (negative, positive, or zero) of the current value.
            </summary>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.Precision">
            <summary>
            Gets the precision of this value, i.e. the total number of digits it contains (excluding any leading/trailing zeros). Zero values have a precision of 1.
            </summary>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.DecimalPlaces">
            <summary>
            Gets the number of digits that appear after the decimal point.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.#ctor(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Singulink.Numerics.BigDecimal"/> struct.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.CreateChecked``1(``0)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.CreateChecked``1(``0)" />
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.CreateSaturating``1(``0)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.CreateSaturating``1(``0)" />
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.CreateTruncating``1(``0)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.CreateTruncating``1(``0)" />
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.FromSingle(System.Single,Singulink.Numerics.FloatConversion)">
            <summary>
            Gets a <see cref="T:Singulink.Numerics.BigDecimal"/> representation of a <see cref="T:System.Single"/> value.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.FromDouble(System.Double,Singulink.Numerics.FloatConversion)">
            <summary>
            Gets a <see cref="T:Singulink.Numerics.BigDecimal"/> representation of a <see cref="T:System.Double"/> value.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Abs(Singulink.Numerics.BigDecimal)">
            <summary>
            Gets the absolute value of the given value.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Divide(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal,System.Int32,Singulink.Numerics.RoundingMode)">
            <summary>
            Performs a division operation using the specified maximum extended precision.
            </summary>
            <param name="dividend">The dividend of the division operation.</param>
            <param name="divisor">The divisor of the division operation.</param>
            <param name="maxExtendedPrecision">If the result of the division does not fit into the precision of the dividend or divisor then this extended
            precision is used.</param>
            <param name="mode">The rounding mode to use.</param>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.DivideExact(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal)">
            <summary>
            Performs a division operation that results in an exact decimal answer (i.e. no repeating decimals).
            </summary>
            <param name="dividend">The dividend of the division operation.</param>
            <param name="divisor">The divisor of the division operation.</param>
            <exception cref="T:System.ArithmeticException">The result could not be represented exactly as a decimal value.</exception>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.TryDivideExact(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal@)">
            <summary>
            Performs a division operation that results in an exact decimal answer (i.e. no repeating decimals).
            </summary>
            <param name="dividend">The dividend of the division operation.</param>
            <param name="divisor">The divisor of the division operation.</param>
            <param name="result">The result of the division operation.</param>
            <returns><see langword="true"/> if an exact result could be produced, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Pow(Singulink.Numerics.BigDecimal,System.Int32)">
            <summary>
            Returns the specified basis raised to the specified exponent. Exponent must be greater than or equal to 0.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Pow10(System.Int32)">
            <summary>
            Returns ten (10) raised to the specified exponent.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.IsInteger(Singulink.Numerics.BigDecimal)">
            <summary>
            Determines whether a value represents an integral value.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.IsOddInteger(Singulink.Numerics.BigDecimal)">
            <summary>
            Determines whether a value represents an odd integral value.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.IsEvenInteger(Singulink.Numerics.BigDecimal)">
            <summary>
            Determines whether a value represents an even integral value.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.IsNegative(Singulink.Numerics.BigDecimal)">
            <summary>
            Determines if a value is negative.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.IsPositive(Singulink.Numerics.BigDecimal)">
            <summary>
            Determines if a value is positive.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.MaxMagnitude(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal)">
            <summary>
            Compares to values to compute which has a greater magnitude.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.MinMagnitude(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal)">
            <summary>
            Compares to values to compute which has a lesser magnitude.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Truncate(Singulink.Numerics.BigDecimal)">
            <summary>
            Discards any fractional digits, effectively rounding towards zero.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.TruncateToPrecision(Singulink.Numerics.BigDecimal,System.Int32)">
            <summary>
            Truncates the number to the given precision by removing any extra least significant digits.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Floor(Singulink.Numerics.BigDecimal)">
            <summary>
            Rounds down to the nearest integral value.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Ceiling(Singulink.Numerics.BigDecimal)">
            <summary>
            Rounds up to the nearest integral value.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Round(Singulink.Numerics.BigDecimal,Singulink.Numerics.RoundingMode)">
            <summary>
            Rounds the value to the nearest integer using the given rounding mode.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Round(Singulink.Numerics.BigDecimal,System.Int32,Singulink.Numerics.RoundingMode)">
            <summary>
            Rounds the value to the specified number of decimal places using the given rounding mode.
            </summary>
            <remarks>
            <para>A negative number of decimal places indicates rounding to a whole number digit, i.e. <c>-1</c> for the nearest 10, <c>-2</c> for the nearest 100, etc.</para>
            </remarks>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.RoundToPrecision(Singulink.Numerics.BigDecimal,System.Int32,Singulink.Numerics.RoundingMode)">
            <summary>
            Rounds the value to the specified precision using the given rounding mode.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its decimal equivalent.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <param name="provider">A format provider that supplies culture-specific parsing information.</param>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its decimal equivalent.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <param name="style">A combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicate the styles that can be parsed.</param>
            <param name="provider">A format provider that supplies culture-specific parsing information.</param>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.TryParse(System.String,System.IFormatProvider,Singulink.Numerics.BigDecimal@)">
            <summary>
            Converts the string representation of a number to its decimal equivalent.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <param name="provider">A format provider that supplies culture-specific parsing information.</param>
            <param name="result">The parsed decimal value if parsing was successful, otherwise zero.</param>
            <returns><see langword="true"/> if parsing was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Singulink.Numerics.BigDecimal@)">
            <summary>
            Converts the string representation of a number to its decimal equivalent.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <param name="style">A combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicate the styles that can be parsed.</param>
            <param name="provider">A format provider that supplies culture-specific parsing information.</param>
            <param name="result">The parsed decimal value if parsing was successful, otherwise zero.</param>
            <returns><see langword="true"/> if parsing was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its decimal equivalent.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <param name="provider">A format provider that supplies culture-specific parsing information.</param>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its decimal equivalent.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <param name="style">A combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicate the styles that can be parsed.</param>
            <param name="provider">A format provider that supplies culture-specific parsing information.</param>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.TryParse(System.ReadOnlySpan{System.Char},Singulink.Numerics.BigDecimal@)">
            <summary>
            Converts the string representation of a number to its decimal equivalent.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <param name="result">The parsed decimal value if parsing was successful, otherwise zero.</param>
            <returns><see langword="true"/> if parsing was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,Singulink.Numerics.BigDecimal@)">
            <summary>
            Converts the string representation of a number to its decimal equivalent.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <param name="provider">A format provider that supplies culture-specific parsing information.</param>
            <param name="result">The parsed decimal value if parsing was successful, otherwise zero.</param>
            <returns><see langword="true"/> if parsing was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,Singulink.Numerics.BigDecimal@)">
            <summary>
            Converts the string representation of a number to its decimal equivalent.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <param name="style">A combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicate the styles that can be parsed.</param>
            <param name="provider">A format provider that supplies culture-specific parsing information.</param>
            <param name="result">The parsed decimal value if parsing was successful, otherwise zero.</param>
            <returns><see langword="true"/> if parsing was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.ToString">
            <summary>
            Returns a full-precision decimal form string representation of this value using the current culture.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.ToString(System.IFormatProvider)">
            <summary>
            Returns a full-precision decimal form string representation of this value.
            </summary>
            <param name="formatProvider">The format provider that will be used to obtain number format information. The current culture is used if none is
            provided.</param>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of this value.
            </summary>
            <param name="format">The string format to use. The "G" format is used if none is provided.</param>
            <param name="formatProvider">The format provider that will be used to obtain number format information. The current culture is used if none is
            provided.</param>
            <remarks>
            <para>String format is composed of a format specifier followed by an optional precision specifier.</para>
            <para>Format specifiers:</para>
            <list type="table">
              <listheader>
                <term>Specifier</term>
                <term>Name</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>"G"</term>
                <term>General</term>
                <description>Default format specifier if none is provided. Precision specifier determines the number of significant digits. If the precision
                specifier is omitted then the value is written out in full precision decimal form. If a precision specifier is provided then the
                more compact of either decimal form or scientific notation is used.</description>
              </item>
              <item>
                <term>"F"</term>
                <term>Fixed-point</term>
                <description>Precision specifier determines the number of decimal digits. Default value is <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits"/>.</description>
              </item>
              <item>
                <term>"N"</term>
                <term>Number</term>
                <description>Like fixed-point, but also outputs group separators. Precision specifier determines the number of decimal digits. Default value is <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits"/>.</description>
              </item>
              <item>
                <term>"E"</term>
                <term>Exponential</term>
                <description>Exponential (scientific) notation. Precision specifier determines the number of decimal digits.</description>
              </item>
              <item>
                <term>"C"</term>
                <term>Currency</term>
                <description>Precision specifier determines the number of decimal digits. Default value is <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits"/>.</description>
              </item>
              <item>
                <term>"P"</term>
                <term>Percentage</term>
                <description>Precision specifier determines the number of decimal digits. Default value is <see cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits"/>.</description>
              </item>
              <item>
                <term>"R"</term>
                <term>Round-trip</term>
                <description>Outputs the mantissa followed by <c>E</c> and then the exponent, always using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.CompareTo(Singulink.Numerics.BigDecimal)">
            <summary>
            Compares this to another <see cref="T:Singulink.Numerics.BigDecimal"/>.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#IComparable#CompareTo(System.Object)">
            <inheritdoc cref="M:System.IComparable.CompareTo(System.Object)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Equals(Singulink.Numerics.BigDecimal)">
            <summary>
            Indicates whether this value and the specified other value are equal.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.Equals(System.Object)">
            <summary>
            Indicates whether this value and the specified object are equal.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.GetHashCode">
            <summary>
            Returns the hash code for this value.
            </summary>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.AlignMantissa(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal)">
            <summary>
            Returns the mantissa of value, aligned to the reference exponent. Assumes the value exponent is larger than the reference exponent.
            </summary>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.System#Numerics#IFloatingPointConstants{Singulink#Numerics#BigDecimal}#E">
            <inheritdoc cref="P:System.Numerics.IFloatingPointConstants`1.E"/>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.System#Numerics#IFloatingPointConstants{Singulink#Numerics#BigDecimal}#Pi">
            <inheritdoc cref="P:System.Numerics.IFloatingPointConstants`1.Pi"/>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.System#Numerics#IFloatingPointConstants{Singulink#Numerics#BigDecimal}#Tau">
            <inheritdoc cref="P:System.Numerics.IFloatingPointConstants`1.Tau"/>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.System#Numerics#ISignedNumber{Singulink#Numerics#BigDecimal}#NegativeOne">
            <inheritdoc cref="P:System.Numerics.ISignedNumber`1.NegativeOne"/>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#Radix">
            <inheritdoc cref="P:System.Numerics.INumberBase`1.Radix"/>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.System#Numerics#IAdditiveIdentity{Singulink#Numerics#BigDecimal,Singulink#Numerics#BigDecimal}#AdditiveIdentity">
            <inheritdoc cref="P:System.Numerics.IAdditiveIdentity`2.AdditiveIdentity"/>
        </member>
        <member name="P:Singulink.Numerics.BigDecimal.System#Numerics#IMultiplicativeIdentity{Singulink#Numerics#BigDecimal,Singulink#Numerics#BigDecimal}#MultiplicativeIdentity">
            <inheritdoc cref="P:System.Numerics.IMultiplicativeIdentity`2.MultiplicativeIdentity"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#IFloatingPoint{Singulink#Numerics#BigDecimal}#GetExponentByteCount">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.GetExponentByteCount"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#IFloatingPoint{Singulink#Numerics#BigDecimal}#GetExponentShortestBitLength">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.GetExponentShortestBitLength"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#IFloatingPoint{Singulink#Numerics#BigDecimal}#GetSignificandBitLength">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.GetSignificandBitLength"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#IFloatingPoint{Singulink#Numerics#BigDecimal}#GetSignificandByteCount">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.GetSignificandByteCount"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#IFloatingPoint{Singulink#Numerics#BigDecimal}#Round(Singulink.Numerics.BigDecimal,System.Int32,System.MidpointRounding)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Round(`0,System.Int32,System.MidpointRounding)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#IFloatingPoint{Singulink#Numerics#BigDecimal}#TryWriteExponentBigEndian(System.Span{System.Byte},System.Int32@)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.TryWriteExponentBigEndian(System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#IFloatingPoint{Singulink#Numerics#BigDecimal}#TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#IFloatingPoint{Singulink#Numerics#BigDecimal}#TryWriteSignificandBigEndian(System.Span{System.Byte},System.Int32@)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.TryWriteSignificandBigEndian(System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#IFloatingPoint{Singulink#Numerics#BigDecimal}#TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#IsCanonical(Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsCanonical(`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#IsComplexNumber(Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsComplexNumber(`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#IsFinite(Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsFinite(`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#IsImaginaryNumber(Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsImaginaryNumber(`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#IsInfinity(Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsInfinity(`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#IsNaN(Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsNaN(`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#IsNegativeInfinity(Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsNegativeInfinity(`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#IsNormal(Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsNormal(`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#IsPositiveInfinity(Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsPositiveInfinity(`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#IsRealNumber(Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsRealNumber(`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#IsSubnormal(Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsSubnormal(`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#IsZero(Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsZero(`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#MaxMagnitudeNumber(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.MaxMagnitudeNumber(`0,`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#MinMagnitudeNumber(Singulink.Numerics.BigDecimal,Singulink.Numerics.BigDecimal)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.MinMagnitudeNumber(`0,`0)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#TryConvertFromChecked``1(``0,Singulink.Numerics.BigDecimal@)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.TryConvertFromChecked``1(``0,`0@)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#TryConvertFromSaturating``1(``0,Singulink.Numerics.BigDecimal@)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.TryConvertFromSaturating``1(``0,`0@)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#TryConvertFromTruncating``1(``0,Singulink.Numerics.BigDecimal@)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.TryConvertFromTruncating``1(``0,`0@)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#TryConvertToChecked``1(Singulink.Numerics.BigDecimal,``0@)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.TryConvertToChecked``1(`0,``0@)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#TryConvertToSaturating``1(Singulink.Numerics.BigDecimal,``0@)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.TryConvertToSaturating``1(`0,``0@)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#Numerics#INumberBase{Singulink#Numerics#BigDecimal}#TryConvertToTruncating``1(Singulink.Numerics.BigDecimal,``0@)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.TryConvertToTruncating``1(`0,``0@)"/>
        </member>
        <member name="M:Singulink.Numerics.BigDecimal.System#ISpanFormattable#TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc cref="M:System.ISpanFormattable.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)"/>
        </member>
        <member name="T:Singulink.Numerics.FloatConversion">
            <summary>
            Specifies floating-point conversion modes.
            </summary>
        </member>
        <member name="F:Singulink.Numerics.FloatConversion.Roundtrip">
            <summary>
            Indicates that the floating-point value's maximum number of significant digits should be used, i.e. 9 for <see cref="T:System.Single"/> and 17 for <see
            cref="T:System.Double"/>. This mode is fast and results in a value that can be round-tripped back to the exact same floating-point value (i.e. the
            floating-point values will compare as equal) but may contain a couple extra "junk" digits.
            </summary>
        </member>
        <member name="F:Singulink.Numerics.FloatConversion.Truncate">
            <summary>
            Indicates that the floating-point value's minimum number of significant digits should be used, i.e. 7 for <see cref="T:System.Single"/> and 15 for <see
            cref="T:System.Double"/>. This matches the conversion behavior of floating-point types to <see cref="T:System.Decimal"/> values. This mode is fast and produces a
            result that does not contain any extra "junk" digits but does not round-trip properly for all floating-point values and may lose a small amount of
            precision for some values.
            </summary>
        </member>
        <member name="F:Singulink.Numerics.FloatConversion.Exact">
            <summary>
            Indicates that the floating-point value should be converted to its exact value. This mode is fast but can result in a large number of digits being
            produced beyond the significant digits or digits required for proper round-tripping of the floating-point value.
            </summary>
        </member>
        <member name="F:Singulink.Numerics.FloatConversion.ParseString">
            <summary>
            Indicates that the floating-point value's <c>ToString()</c> implementation should be used to produce the digits. This is the slowest conversion
            mode and does not round-trip properly for all floating-point values.
            </summary>
        </member>
    </members>
</doc>
